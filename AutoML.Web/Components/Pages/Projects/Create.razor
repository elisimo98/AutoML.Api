@page "/projects/create"
@using AutoML.Web.Data.Interfaces
@using AutoML.Web.Interfaces
@using AutoML.Web.Models
@using AutoML.Web.Models.Data
@inject IProjectService ProjectService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject IUserService UserService
@rendermode InteractiveServer

<PageTitle>Create Project</PageTitle>

<div class="container py-6">
    <div class="text-center mb-6">
        <h1 class="display-4 fw-bold text-white">Create Project</h1>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="shadow rounded text-center p-4 border border-grey bg-primary">
                <h4 class="font-semibold mb-2 text-white">Create Project</h4>
                <p class="text-sm mb-4 text-white">CSV Supported</p>

                <EditForm Model="@projectVm" OnValidSubmit="OnValidSubmit" FormName="CreateProjectForm">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="projectVm.Name" />
                        <ValidationMessage For="@(() => projectVm.Name)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputTextArea class="form-control" @bind-Value="projectVm.Description" />
                        <ValidationMessage For="@(() => projectVm.Description)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Create</button>
                </EditForm>
            </div>
        </div>
    </div>

</div>


@if (!string.IsNullOrEmpty(message))
{
    <div class="alert alert-info mt-2">@message</div>
}

@code {
    private CreateProjectViewModel projectVm = new CreateProjectViewModel();
    string message = string.Empty;

    private async Task OnValidSubmit()
    {
        var user = await UserService.GetCurrentUserAsync();

        if (user == null)
        {
            message = "User not found or not logged in.";
            return;
        }

        var createdProject = await ProjectService.CreateProjectAsync(projectVm.Name, projectVm.Description, user.Id);

        message = $"Project '{createdProject.Name}' created successfully!";
        // Optionally redirect to project details page
        //Navigation.NavigateTo($"/projects/{createdProject.Id}");
    }
}
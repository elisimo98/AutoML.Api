@page "/upload"
@using System.Text
@using AutoML.Domain.Interfaces
@using AutoML.Web.Interfaces
@rendermode InteractiveServer
@inject IStorageService StorageService

<PageTitle>Upload Your Dataset</PageTitle>

<div class="container py-6">
    <div class="text-center mb-6">
        <h1 class="display-4 fw-bold text-white">Upload Your Dataset</h1>
        <p class="lead text-secondary mx-auto" style="max-width: 600px;">
            Start by uploading your dataset
        </p>
    </div>

    <div class="row">

        <div class="col-4">
            <div class="shadow rounded text-center p-4 border border-grey bg-primary">
                <h4 class="font-semibold mb-2 text-white">Choose File</h4>
                <p class="text-sm mb-4 text-white">CSV Supported</p>

                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFileAsync">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Files
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </div>
        </div>

        <div class="col-8">
            <div class="shadow rounded text-center p-4 border border-grey max-height-500 bg-primary text-white">

                @if (IsFileSaveSuccessful)
                {
                    <p>File saved successfully!</p>
                }

                @if (!IsFileSaveSuccessful && IsFileSelected)
                {
                    <h4>CSV Preview</h4>

                    <p>@SelectedFile!.Name</p>
                    <table class="table">
                        <thead>
                            <tr>
                                @foreach (var header in CsvData!.First())
                                {
                                    <th class="text-white">@header</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var row in CsvData!.Skip(1))
                            {
                                <tr>
                                    @foreach (var cell in row)
                                    {
                                        <td class="text-white">@cell</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>

                    <MudButton OnClick=SaveFileAsync Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">
                        Save
                    </MudButton>

                    <MudButton OnClick=RemoveFile Class="ms-2" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Remove">
                        Remove
                    </MudButton>
                }

                @if (!IsFileSelected && !IsFileSaveSuccessful)
                {
                    <p>Upload a file to see preview</p>
                }

                @if (IsFileSelected && IsFileSaveUnsuccessful)
                {
                    <p>An error occured while trying to upload file</p>
                    <p>@FileSaveErrorMessage</p>
                }
            </div>
        </div>
    </div>

</div>

@code
{
    List<string[]>? CsvData;
    IBrowserFile? SelectedFile;
    bool IsFileSelected => CsvData != null && CsvData.Any() && SelectedFile != null;
    bool IsFileSaveSuccessful;
    bool IsFileSaveUnsuccessful;
    string FileSaveErrorMessage = string.Empty;

    private async Task UploadFileAsync(IBrowserFile file)
    {
        SelectedFile = file;

        using var stream = file.OpenReadStream();
        using var reader = new StreamReader(stream, Encoding.UTF8);

        CsvData = new List<string[]>();

        var line = await reader.ReadLineAsync();
        while (line != null)
        {
            if (!string.IsNullOrWhiteSpace(line))
            {
                var fields = line.Split(',');
                CsvData.Add(fields);
            }

            line = await reader.ReadLineAsync();
        }
    }

    private async Task SaveFileAsync()
    {
        if (SelectedFile == null)
        {
            return;
        }

        try
        {
            await using var stream = SelectedFile.OpenReadStream();
            await StorageService.UploadCsvAsync(stream, SelectedFile.Name);
        }
        catch (Exception ex)
        {
            IsFileSaveUnsuccessful = true;
            FileSaveErrorMessage = ex.Message;
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    private void RemoveFile()
    {
        CsvData?.Clear();
        SelectedFile = null;
    }
}
